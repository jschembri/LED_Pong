#include "Adafruit_WS2801.h"
#include "SPI.h" // Comment out this line if using Trinket or Gemma
#ifdef __AVR_ATtiny85__
 #include <avr/power.h>
#endif

#include "Timer.h"

/*****************************************************************************
Example sketch for driving Adafruit WS2801 pixels!


  Designed specifically to work with the Adafruit RGB Pixels!
  12mm Bullet shape ----> https://www.adafruit.com/products/322
  12mm Flat shape   ----> https://www.adafruit.com/products/738
  36mm Square shape ----> https://www.adafruit.com/products/683

  These pixels use SPI to transmit the color data, and have built in
  high speed PWM drivers for 24 bit color per pixel
  2 pins are required to interface

  Adafruit invests time and resources providing this open source code, 
  please support Adafruit and open-source hardware by purchasing 
  products from Adafruit!

  Written by Limor Fried/Ladyada for Adafruit Industries.  
  BSD license, all text above must be included in any redistribution

*****************************************************************************/

// Choose which 2 pins you will use for output.
// Can be any valid output pins.
// The colors of the wires may be totally different so
// BE SURE TO CHECK YOUR PIXELS TO SEE WHICH WIRES TO USE!
uint8_t dataPin  = 2;    // Yellow wire on Adafruit Pixels
uint8_t clockPin = 3;    // Green wire on Adafruit Pixels

// Don't forget to connect the ground wire to Arduino ground,
// and the +5V wire to a +5V supply

// Set the first variable to the NUMBER of pixels. 25 = 25 pixels in a row
Adafruit_WS2801 strip = Adafruit_WS2801(100, dataPin, clockPin);

// Optional: leave off pin numbers to use hardware SPI
// (pinout is then specific to each board and can't be changed)
//Adafruit_WS2801 strip = Adafruit_WS2801(25);

// For 36mm LED pixels: these pixels internally represent color in a
// different format.  Either of the above constructors can accept an
// optional extra parameter: WS2801_RGB is 'conventional' RGB order
// WS2801_GRB is the GRB order required by the 36mm pixels.  Other
// than this parameter, your code does not need to do anything different;
// the library will handle the format change.  Examples:
//Adafruit_WS2801 strip = Adafruit_WS2801(25, dataPin, clockPin, WS2801_GRB);
//Adafruit_WS2801 strip = Adafruit_WS2801(25, WS2801_GRB);


// Enable one of these two #includes and comment out the other.
// Conditional #include doesn't work due to Arduino IDE shenanigans.
#include <Wire.h> // Enable this line if using Arduino Uno, Mega, etc.
//#include <TinyWireM.h> // Enable this line if using Adafruit Trinket, Gemma, etc.

#include "Adafruit_LEDBackpack.h"
#include "Adafruit_GFX.h"

Adafruit_7segment matrix = Adafruit_7segment();

//Setting up Red Left/Right
int redRight = 5;
int player1Right = 0;
int player1Left = 0;
int redLeft = 7;
int player1Score = 0;
int player1PressedRight = 0;
int player1PressedLeft = 0;

int player1ResetPin = 9;
int player2ResetPin = 11;
int player1Reset = 0;
int player2Reset = 0;
int player1Pressed = 0;
int player2Pressed = 0;

//Setting up Green Left/Right
int greenRight = 13;
int player2Right = 0;
int player2Left = 0;
int greenLeft = 12;
int player2Score = 0;
int player2PressedRight = 0;
int player2PressedLeft = 0;

//Game mechanics
int WINDOWWIDTH = 10;
int WINDOWHEIGHT = 10;

int PADDLESIZE = 2;
int paddleRedCenter = 1;
int paddleBlueCenter = 1;

int BallX = 3;
int BallY = 3;
//Keeps track of ball direction
int  ballDirX = -1; // -1 = left 1 = right
int ballDirY = -1; // -1 = up 1 = down

Timer t;

void setup() {
#if defined(__AVR_ATtiny85__) && (F_CPU == 16000000L)
  clock_prescale_set(clock_div_1); // Enable 16 MHz on Trinket
#endif

#ifndef __AVR_ATtiny85__
  Serial.begin(9600);
  Serial.println("7 Segment Backpack Test");
#endif
  matrix.begin(0x70);
  
  strip.begin();

  // Update LED contents, to start they are all 'off'
  strip.show();
  //Setting up inputs
  pinMode(redRight, INPUT);    // declare pushbutton as input
  pinMode(redLeft, INPUT);    // declare pushbutton as input
  pinMode(player1ResetPin, INPUT);    // declare pushbutton as input
  pinMode(player2ResetPin, INPUT);    // declare pushbutton as input
  Serial.begin(9600);
  t.every(150, moveBall);
}




void loop() {



  player1Right =  digitalRead(redRight);
  player1Left  = digitalRead(redLeft);
  player1Reset =  digitalRead(player1ResetPin);
  player2Reset  = digitalRead(player2ResetPin);
  player2Right =  digitalRead(greenRight);
  player2Left  = digitalRead(greenLeft);
  
  // Pressing the Right Red Button
  if (player1Right == HIGH && player1PressedRight == LOW && paddleRedCenter +PADDLESIZE <10  ) {         // check if the input is HIGH (button released)
   // player1Score = player1Score+1;
    player1PressedRight = 1;
   paddleRedCenter =  paddleRedCenter+1;
  }else if(player1Right == LOW){
    player1PressedRight = 0;
  } 
  
  // Pressing the Left Red Button
  if (player1Left == HIGH && player1PressedLeft == LOW && paddleRedCenter > 1 ) {         // check if the input is HIGH (button released)
   // player1Score = player1Score-1; 
    player1PressedLeft = 1;
    paddleRedCenter = paddleRedCenter-1;
  }else if (player1Left == LOW){
    player1PressedLeft = 0;
  } 

  // Pressing the Player 1 Reset Button
  if (player1Reset == HIGH && player1Pressed == LOW) {         // check if the input is HIGH (button released)
    player1Pressed = 1;
    
  }else if(player1Reset == LOW){
    player1Pressed = 0;
  } 

  
  // Pressing the Player 2 Reset Button
  if (player2Reset == HIGH && player2Pressed == LOW) {         // check if the input is HIGH (button released)
    player2Pressed = 1;
    
    
    
  }else if(player1Reset == LOW){
    player2Pressed = 0;
  } 

    // Pressing the Right Green Button
  if (player2Right == HIGH && player2PressedRight == LOW && paddleBlueCenter > 1) {         // check if the input is HIGH (button released)
    player2PressedRight = 1;
    //player2Score = player2Score-1;
    paddleBlueCenter = paddleBlueCenter - 1;
  }else if(player2Right == LOW){
    player2PressedRight = 0;
  } 
  
  // Pressing the Left Green Button
  if (player2Left == HIGH && player2PressedLeft == LOW && paddleBlueCenter+PADDLESIZE <10) {         // check if the input is HIGH (button released)
    //player2Score = player2Score+1; 
    paddleBlueCenter = paddleBlueCenter + 1;
    player2PressedLeft = 1;
  }else if (player2Left == LOW){
    player2PressedLeft = 0;
  } 
  displayBlack();
  
  drawPaddle1(paddleRedCenter);
  drawPaddle2(paddleBlueCenter);
  

  
  drawBall( BallX, BallY);

  t.update();
  
  displayScore(player1Score, player2Score);

  Serial.print(BallX);
  Serial.print(": "); 
  Serial.print(BallY);
  Serial.print(": ");
  Serial.print(ballDirX);
  Serial.print(": "); 
  Serial.println(ballDirY);  
  


   
  //  
  //matrix.print(player1Score);
 // matrix.writeDisplay();
  strip.show();

  //colorPrint(player1Score);
  
  //colorWipe(Color(255, 0, 0), 50);
 // colorWipe(Color(0, 255, 0), 50);
  //colorWipe(Color(0, 0, 255), 50);
  //rainbow(20);
  //rainbowCycle(20);
}

void moveBall(){
  
    BallX = BallX + ballDirX;
    BallY = BallY + ballDirY;
    checkEdgeCollision();
    ballDirY = checkHitBall() *ballDirY;
    checkPointScored();
  
}

int checkHitBall(){
  int returntatus;
  if(ballDirY == -1  && BallY == 2 && (BallX + ballDirX >= paddleBlueCenter && (BallX+ ballDirX ) <= paddleBlueCenter + PADDLESIZE)){
    return -1;
  }else if (ballDirY == 1  && BallY == 9 && ( BallX + ballDirX >= paddleRedCenter && BallX+ ballDirX <= paddleRedCenter + PADDLESIZE)){
    return -1;
  }else{
    return 1;
  }
  
}

void checkPointScored(){
  if (BallY == 10){
    player2Score += 1;
  } else if (BallY == 1){
    player1Score +=1;
  }
  
}

void checkEdgeCollision(){
  if (BallX == 1 || BallX == 10){
    ballDirX = ballDirX * -1;
  }
  if (BallY == 1 || BallY == 10){
    ballDirY = ballDirY * -1;
  }

  
}

void drawPaddle1(int paddleRedCenter){
  int i;
  for(i=paddleRedCenter; i<= paddleRedCenter+PADDLESIZE; i++){
    printXY(i,10, Color(255, 0, 0));
  }
  ;
}


void drawPaddle2(int paddleBlueCenter){
  int i;
  for(i=paddleBlueCenter; i <= paddleBlueCenter+PADDLESIZE; i++){
    printXY(i,1, Color(0, 0, 255));
    //Serial.println(i);
  }

}

void drawBall(int BallX, int BallY){

  printXY(BallX,BallY, Color(0, 255, 0));  
}

void printXY( int x, int y, uint32_t c){
  int pixelNumber;
  if ( y % 2 == 1){ // if the row is odd
     pixelNumber = (y-1)*10 + x - 1;  
  }else{ // if the row is even
    pixelNumber = y*10 - (x);
  }
  strip.setPixelColor(pixelNumber, c);
  //Serial.println(pixelNumber);
}

void displayScore(int player1Score, int player2Score){
  matrix.drawColon(true);
  matrix.blinkRate(0);
  matrix.writeDigitNum(0, player2Score / 10) ;
  matrix.writeDigitNum(1, player2Score % 10) ;
  matrix.writeDigitNum(3, player1Score/10) ;
  matrix.writeDigitNum(4, player1Score % 10) ;
  matrix.writeDisplay();
}

void displayBlack(){
      for (int i=0; i < strip.numPixels(); i++) {
        strip.setPixelColor(i, Color( 0, 0, 0 ));
      }
}

void colorPrint( int player1Score){
      strip.setPixelColor(player1Score, Color(255, 0, 0));
      strip.setPixelColor(player1Score-1, Color(0, 0, 0));
      strip.show();
  
}

void rainbow(uint8_t wait) {
  int i, j;
   
  for (j=0; j < 256; j++) {     // 3 cycles of all 256 colors in the wheel
    for (i=0; i < strip.numPixels(); i++) {
      strip.setPixelColor(i, Wheel( (i + j) % 255));
    }  
    strip.show();   // write all the pixels out
    delay(wait);
  }
}

// Slightly different, this one makes the rainbow wheel equally distributed 
// along the chain
void rainbowCycle(uint8_t wait) {
  int i, j;
  
  for (j=0; j < 256 * 5; j++) {     // 5 cycles of all 25 colors in the wheel
    for (i=0; i < strip.numPixels(); i++) {
      // tricky math! we use each pixel as a fraction of the full 96-color wheel
      // (thats the i / strip.numPixels() part)
      // Then add in j which makes the colors go around per pixel
      // the % 96 is to make the wheel cycle around
      strip.setPixelColor(i, Wheel( ((i * 256 / strip.numPixels()) + j) % 256) );
    }  
    strip.show();   // write all the pixels out
    delay(wait);
  }
}

// fill the dots one after the other with said color
// good for testing purposes
void colorWipe(uint32_t c, uint8_t wait) {
  int i;
  
  for (i=0; i < strip.numPixels(); i++) {
      strip.setPixelColor(i, c);
      strip.show();
      delay(wait);
  }
}

/* Helper functions */

// Create a 24 bit color value from R,G,B
uint32_t Color(byte r, byte g, byte b)
{
  uint32_t c;
  c = r;
  c <<= 8;
  c |= g;
  c <<= 8;
  c |= b;
  return c;
}

//Input a value 0 to 255 to get a color value.
//The colours are a transition r - g -b - back to r
uint32_t Wheel(byte WheelPos)
{
  if (WheelPos < 85) {
   return Color(WheelPos * 3, 255 - WheelPos * 3, 0);
  } else if (WheelPos < 170) {
   WheelPos -= 85;
   return Color(255 - WheelPos * 3, 0, WheelPos * 3);
  } else {
   WheelPos -= 170; 
   return Color(0, WheelPos * 3, 255 - WheelPos * 3);
  }
}
